(ns signature-invariants.young-tableau-test
  (:require 
    [clojure.test :refer :all]
    [signature-invariants.young-tableau :refer :all]))

;(def standard-2-2-2
;[
;  [[0, 3], [1, 4], [2, 5]]
;  [[0, 2], [1, 4], [3, 5]]
;  [[0, 1], [2, 4], [3, 5]]
;  [[0, 2], [1, 3], [4, 5]]
;  [[0, 1], [2, 3], [4, 5]]
;])

;(def standard-3-3
;  [
;   [[0, 2, 4], [1, 3, 5]]
;   [[0, 1, 4], [2, 3, 5]]
;   [[0, 2, 3], [1, 4, 5]]
;   [[0, 1, 3], [2, 4, 5]]
;   [[0, 1, 2], [3, 4, 5]]])
;
;(def standard-3-3'
;  (map (fn [z] (map vector (first z) (second z))) standard-3-3))
;
;(def standard-3-3-3
;  [
;[[0, 3, 6], [1, 4, 7], [2, 5, 8]]
;[[0, 2, 6], [1, 4, 7], [3, 5, 8]]
;[[0, 1, 6], [2, 4, 7], [3, 5, 8]]
;[[0, 2, 6], [1, 3, 7], [4, 5, 8]]
;[[0, 1, 6], [2, 3, 7], [4, 5, 8]]
;[[0, 3, 5], [1, 4, 7], [2, 6, 8]]
;[[0, 2, 5], [1, 4, 7], [3, 6, 8]]
;[[0, 1, 5], [2, 4, 7], [3, 6, 8]]
;[[0, 2, 5], [1, 3, 7], [4, 6, 8]]
;[[0, 1, 5], [2, 3, 7], [4, 6, 8]]
;[[0, 3, 4], [1, 5, 7], [2, 6, 8]]
;[[0, 2, 4], [1, 5, 7], [3, 6, 8]]
;[[0, 1, 4], [2, 5, 7], [3, 6, 8]]
;[[0, 2, 3], [1, 5, 7], [4, 6, 8]]
;[[0, 1, 3], [2, 5, 7], [4, 6, 8]]
;[[0, 1, 2], [3, 5, 7], [4, 6, 8]]
;[[0, 2, 4], [1, 3, 7], [5, 6, 8]]
;[[0, 1, 4], [2, 3, 7], [5, 6, 8]]
;[[0, 2, 3], [1, 4, 7], [5, 6, 8]]
;[[0, 1, 3], [2, 4, 7], [5, 6, 8]]
;[[0, 1, 2], [3, 4, 7], [5, 6, 8]]
;[[0, 3, 5], [1, 4, 6], [2, 7, 8]]
;[[0, 2, 5], [1, 4, 6], [3, 7, 8]]
;[[0, 1, 5], [2, 4, 6], [3, 7, 8]]
;[[0, 2, 5], [1, 3, 6], [4, 7, 8]]
;[[0, 1, 5], [2, 3, 6], [4, 7, 8]]
;[[0, 3, 4], [1, 5, 6], [2, 7, 8]]
;[[0, 2, 4], [1, 5, 6], [3, 7, 8]]
;[[0, 1, 4], [2, 5, 6], [3, 7, 8]]
;[[0, 2, 3], [1, 5, 6], [4, 7, 8]]
;[[0, 1, 3], [2, 5, 6], [4, 7, 8]]
;[[0, 1, 2], [3, 5, 6], [4, 7, 8]]
;[[0, 2, 4], [1, 3, 6], [5, 7, 8]]
;[[0, 1, 4], [2, 3, 6], [5, 7, 8]]
;[[0, 2, 3], [1, 4, 6], [5, 7, 8]]
;[[0, 1, 3], [2, 4, 6], [5, 7, 8]]
;[[0, 1, 2], [3, 4, 6], [5, 7, 8]]
;[[0, 2, 4], [1, 3, 5], [6, 7, 8]]
;[[0, 1, 4], [2, 3, 5], [6, 7, 8]]
;[[0, 2, 3], [1, 4, 5], [6, 7, 8]]
;[[0, 1, 3], [2, 4, 5], [6, 7, 8]]
;[[0, 1, 2], [3, 4, 5], [6, 7, 8]] ])

(deftest standard-tableaux-text []
  (is (=
       [[0 2 4] [1 3 5]]
       (first-standard-tableau [3 3])))

  (is (=
       [[0 3 5 6] [1 4] [2]]
       (first-standard-tableau [4 2 1])))

  (is (=
        [0 1 2 0 1 0 0]
        (standard-tableau->vector [[0 3 5 6] [1 4] [2]])))
  (is (=
        [[0 3 5 6] [1 4] [2]]
        (vector->standard-tableau [0 1 2 0 1 0 0])))

  (is (=
       [ [0 1 2 3] [4 5 6] ]
       (last-standard-tableau [4 3])))

  (is (=
       [3 [2 1 1 0 0 0 0]]
       (#'signature-invariants.young-tableau/find-j (standard-tableau->vector [[0 3 5 6] [1 4] [2]]))))

    
  (is (=
        [4 3 2 1 1]
        (rows->cols [5 3 2 1])))

  (is (=
        [5 3 2 1]
        (rows->cols (rows->cols [5 3 2 1]))))

  (is (=
       [ [:a :e :g]
         [:b :f]
         [:c]
         [:d] ]
        (tableau-rows->tableau-cols
          [ [:a :b :c :d]
            [:e :f]
            [:g] ])))

  (is (=
        [0 1 2 0 1 2 0 -1 -1 -1]
        (#'signature-invariants.young-tableau/fill-T-j [-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1] 8 [3 2 2])))


  (every?
    is-standard-tableau?
    (standard-tableaux [2 2 2]))
  (every?
    is-standard-tableau?
    (standard-tableaux [3 3 3]))

  (defn catalan-number [n]
    (letfn [(fact [x]
              (apply * (range 1 (inc x))))
            (n-choose-k [n k]
              (/ (fact n) (* (fact k) (fact (- n k)))))]
      (/
        (n-choose-k (* 2 n) n)
        (inc n))))

  (is (=
       (map catalan-number (range 1 8))
       (map (fn [n] (count (standard-tableaux [n n]))) (range 1 8))))

  (is
    (=
     {0 0
      1 2
      2 4
      3 1
      4 3
      5 5}
      (tableau->permutation [ [0 1] [2 3] [4 5] ])))
  )
